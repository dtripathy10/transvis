/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.iit.tse.transvis.experimentui.tripgeneration;

import edu.iit.tse.transvis.experimentui.EXPERIMENTTYPE;
import edu.iit.tse.transvis.experimentui.Installer;
import edu.iit.tse.transvis.experimentui.ProjectInformation;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.windows.WindowManager;

public final class RegressionVisualPanel extends JPanel {

    /**
     * Creates new form RegressionVisualPanel
     */
    private List<String> fileList;
    private FileObject regressionFile;
    private List<String> header = new ArrayList<>();
    private ArrayList<String> list1 = new ArrayList<>();
    private ArrayList<String> list2 = new ArrayList<>();
    private FileObject te;
    DataAnalysisPanel lp;
    RegressionAnalysisPanel hp;
    DataAnalysisPanel1 lp1;
    DataAnalysisPanel lp2;

    public RegressionVisualPanel() {
        //Get all the file name from the directory
        fileList = getAllFile();
        lp = new DataAnalysisPanel(list1, list2);
        hp = new RegressionAnalysisPanel(list1, list2);
        lp1 = new DataAnalysisPanel1(list1, list2);
        lp2 = new DataAnalysisPanel(list1, list2);
        initComponents();
    }

    @Override
    public String getName() {
        return "Step #1";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        choice1 = new java.awt.Choice();
        jLabel2 = new javax.swing.JLabel();
        choice2 = new java.awt.Choice();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        choice3 = new java.awt.Choice();
        choice4 = new java.awt.Choice();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(500, 484));

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RegressionVisualPanel.class, "RegressionVisualPanel.jButton1.text")); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RegressionVisualPanel.class, "RegressionVisualPanel.jLabel1.text_1")); // NOI18N

        for(String item:fileList) {
            choice1.add(item);
        }
        choice1.setBackground(Color.WHITE);
        choice1.setEnabled(true);
        choice1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        choice1.setFocusable(false);
        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RegressionVisualPanel.class, "RegressionVisualPanel.jLabel2.text_1")); // NOI18N

        choice2.add("Data Analysis");
        choice2.add("Regression Analysis");
        choice2.setFocusable(false);
        choice2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice2ItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RegressionVisualPanel.class, "RegressionVisualPanel.jLabel3.text_1")); // NOI18N

        choice3.add("Corelation");
        choice3.add("Descriptive Statistics");
        choice3.add("Plot");
        choice3.select("Corelation");
        choice3.setFocusable(false);
        choice3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice3ItemStateChanged(evt);
            }
        });

        choice4.setFocusable(false);
        choice4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice4ItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RegressionVisualPanel.class, "RegressionVisualPanel.jLabel4.text_1")); // NOI18N

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(RegressionVisualPanel.class, "RegressionVisualPanel.jButton4.text_1")); // NOI18N
        jButton4.setFocusPainted(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(328, 277));
        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choice4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(183, 183, 183))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(choice1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(choice4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jButton4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void choice2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice2ItemStateChanged
        if (choice2.getSelectedItem().equals("Data Analysis")) {
            choice3.removeAll();
            choice3.add("Corelation");
            choice3.add("Descriptive Statistics");
            choice3.add("Plot");
        }
        if (choice2.getSelectedItem().equals("Regression Analysis")) {
            choice3.removeAll();
            choice3.add("Linear");
            choice3.add("Non Linear");
        }
    }//GEN-LAST:event_choice2ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                JFileChooser chooser = new JFileChooser("");
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnVal = chooser.showOpenDialog((java.awt.Component) null);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try {
                        FileObject temp = FileUtil.toFileObject(chooser.getSelectedFile());
                        regressionFile = FileUtil.copyFile(temp, ProjectInformation.getCurrentProject().getProjectDirectory().getFileObject("input"), temp.getName());
                        choice1.add(regressionFile.getPath());
                        fileList.add(regressionFile.getPath());
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        });
    }//GEN-LAST:event_jButton1MouseClicked

    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged

        String line = null;
        String selectedItem = fileList.get(fileList.indexOf(evt.getItem()));
        System.out.println("Selected Item is\t" + selectedItem);
        regressionFile = ProjectInformation.getCurrentProject().getProjectDirectory().getFileObject("input").getFileObject(selectedItem);
        //Read the Header Information
        BufferedReader bufRdr;
        try {
            boolean boo = false;
            bufRdr = new BufferedReader(new InputStreamReader(regressionFile.getInputStream()));
            while ((line = bufRdr.readLine()) != null && boo != true) {
                if (line.trim().startsWith("#")) {
                    // Don't inject current line into buffer
                } else {
                    header = null;
                    header = fromCommaSeparatedString(line);
                    boo = true;
                    System.out.println("Header\t" + header);
                }
            }


            System.out.println(line);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_choice1ItemStateChanged
    private void choice4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice4ItemStateChanged
        if (choice4.getSelectedItem().equals("Quadratic")) {
            jPanel1.removeAll();
            hp.setList(header);
            jPanel1.add(hp, BorderLayout.CENTER);
            jPanel1.revalidate();
        }
        if (choice4.getSelectedItem().equals("Quadratic")) {
            jPanel1.removeAll();
            hp.setList(header);
            jPanel1.add(hp, BorderLayout.CENTER);
            jPanel1.revalidate();
        }
        if (choice4.getSelectedItem().equals("Power")) {
            jPanel1.removeAll();
            hp.setList(header);
            jPanel1.add(hp, BorderLayout.CENTER);
            jPanel1.revalidate();
        }
        if (choice4.getSelectedItem().equals("Logarithm")) {
            jPanel1.removeAll();
            hp.setList(header);
            jPanel1.add(hp, BorderLayout.CENTER);
            jPanel1.revalidate();
        }
    }//GEN-LAST:event_choice4ItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice choice1;
    private java.awt.Choice choice2;
    private java.awt.Choice choice3;
    private java.awt.Choice choice4;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    // End of variables declaration//GEN-END:variables

    private List<String> getAllFile() {
        List<String> temp = new ArrayList<>();
        System.out.println(Installer.projects);
        FileObject projectDirectory = ProjectInformation.getCurrentProject().getProjectDirectory();
        te = projectDirectory.getFileObject("input");
        for (FileObject children : te.getChildren()) {
            if (children.isData()) {
                temp.add(children.getName() + "." + children.getExt());
            }
        }
        return temp;
    }

    private void choice3ItemStateChanged(java.awt.event.ItemEvent evt) {
        if (choice3.getSelectedItem().equals("Linear")) {
            choice4.removeAll();
            hp.setList(header);
            jPanel1.removeAll();
            jPanel1.add(hp, BorderLayout.CENTER);
            jPanel1.revalidate();

        }
        if (choice3.getSelectedItem().equals("Non Linear")) {
            choice4.removeAll();
            choice4.add("Quadratic");
            choice4.add("Power");
            choice4.add("Exponential");
            choice4.add("Logarithm");
        }
        if (choice3.getSelectedItem().equals("Corelation")) {
            lp.setList1(header);
            jPanel1.removeAll();
            jPanel1.add(lp, BorderLayout.CENTER);
            jPanel1.revalidate();
            jPanel1.repaint();
        }
        if (choice3.getSelectedItem().equals("Descriptive Statistics")) {
            //Add The Panel
            lp2.setList1(header);
            jPanel1.removeAll();
            jPanel1.add(lp2, BorderLayout.CENTER);
            jPanel1.revalidate();
            jPanel1.repaint();
        }
        if (choice3.getSelectedItem().equals("Plot")) {
            //Add The Panel
            lp1.setList1(header);
            jPanel1.removeAll();
            jPanel1.add(lp1, BorderLayout.CENTER);
            jPanel1.revalidate();
        }
    }

    public HashMap getCorelationParameter() {
        // Create a hash map
        HashMap hm = new HashMap();
        // Put elements to the map
        String[] s = lp.getSelectedValues();
        hm.put("selectedValues", Arrays.asList(s));
        hm.put("fileName", regressionFile);
        return hm;
    }

    public HashMap getPlotParameter() {
        // Create a hash map
        HashMap hm = new HashMap();
        // Put elements to the map
        String s1 = lp1.getChoice1().getSelectedItem();
        String s2 = lp1.getChoice2().getSelectedItem();
        hm.put("para1", s1);
        hm.put("para2", s2);
        return hm;
    }

    public EXPERIMENTTYPE getExperiment() {
        String level1 = choice2.getSelectedItem();
        switch (level1) {
            case "Data Analysis":
                String level2 = choice3.getSelectedItem();
                switch (level2) {
                    case "Corelation":
                        return EXPERIMENTTYPE.Corelation;
                    case "Descriptive Statistics":
                        return EXPERIMENTTYPE.Descriptive_Statistics;
                    case "Plot":
                        return EXPERIMENTTYPE.Plot;
                }
                break;
            case "Regression Analysis":
                level2 = choice3.getSelectedItem();
                switch (level2) {
                    case "Linear":
                        return EXPERIMENTTYPE.Linear;
                    case "Non Linear":
                        String level3 = choice4.getSelectedItem();
                        switch (level3) {
                            case "Quadratic":
                                return EXPERIMENTTYPE.Quadratic;
                            case "Power":
                                return EXPERIMENTTYPE.Power;
                            case "Exponential":
                                return EXPERIMENTTYPE.Exponential;
                            case "Logarithm":
                                return EXPERIMENTTYPE.Logarithm;
                        }
                }
                break;
        }
        return EXPERIMENTTYPE.ERROR;
    }

    public static List<String> fromCommaSeparatedString(String string) {
        List<String> strings = new ArrayList<>();
        String[] splitted = string.split(",");
        for (int i = 0; i < splitted.length; i++) {
            String element = splitted[ i].trim();
            strings.add(element);
        }
        System.out.println("splitted.length\t" + splitted.length);
        return strings;
    }

    public FileObject getRegressionFile() {
        return regressionFile;
    }
}
